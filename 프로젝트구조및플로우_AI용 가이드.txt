STUDIYA 수학 튜터 MVP - 프로젝트 구조 및 플로우 (AI 참조용)

=== OVERVIEW ===
Framework: Next.js 15 App Router + TypeScript + TailwindCSS 4.0
Design: Neo-Brutalism (둥근모서리, 부드러운색상, 핑크강조)
Authentication: 가짜 세션 (localStorage 기반)
Data: Mock 데이터 시스템 (실제 API 없음)

=== PROJECT STRUCTURE ===
front/
├── src/app/                    # 페이지 라우팅
│   ├── page.tsx               # 랜딩 페이지
│   ├── try/page.tsx           # 사전평가 시작
│   ├── quiz/page.tsx          # 퀴즈 진행
│   ├── results-teaser/page.tsx # 결과 티저
│   ├── auth/page.tsx          # 원클릭 로그인
│   ├── dashboard/page.tsx     # 대시보드
│   ├── context/page.tsx       # 개인화 컨텍스트
│   ├── tutor/page.tsx         # AI 튜터 대화
│   ├── settings/page.tsx      # 설정
│   ├── globals.css            # 디자인 시스템
│   └── layout.tsx             # 루트 레이아웃
├── src/components/
│   ├── layout/                # 레이아웃 컴포넌트
│   │   ├── Header.tsx         # 헤더 + 네비게이션
│   │   ├── Layout.tsx         # 메인 레이아웃 래퍼
│   │   ├── Sidebar.tsx        # 데스크톱 사이드바
│   │   └── TabBar.tsx         # 모바일 하단 탭바
│   ├── ui/                    # 기본 UI 컴포넌트
│   │   ├── Button.tsx         # 버튼 (Primary/Secondary/Outline)
│   │   ├── Card.tsx           # 카드 레이아웃
│   │   ├── Input.tsx          # 입력창
│   │   ├── Badge.tsx          # 배지/라벨
│   │   ├── Modal.tsx          # 모달 팝업
│   │   ├── Toast.tsx          # 알림 메시지
│   │   ├── JsonViewer.tsx     # JSON 표시
│   │   └── Skeleton.tsx       # 로딩 상태
│   └── features/              # 기능별 컴포넌트
│       ├── CuteQuiz.tsx       # 메인 퀴즈 UI (듀오링고 스타일)
│       ├── AnimatedQuizTimer.tsx # Framer Motion 타이머
│       ├── ChatBubble.tsx     # 채팅 말풍선
│       ├── GradeSelector.tsx  # 학년 선택
│       ├── HomePage.tsx       # 랜딩 인터랙티브 요소
│       ├── HomeCTA.tsx        # 랜딩 CTA 버튼
│       └── WebVitals.tsx      # 성능 모니터링
├── src/lib/                   # 유틸리티 및 데이터
│   ├── mockData.ts           # 모든 가짜 데이터
│   ├── utils.ts              # 공통 유틸리티
│   ├── useTyping.ts          # 타이핑 애니메이션 훅
│   └── useTimer.ts           # 카운트다운 타이머 훅
└── public/                   # 정적 파일
    ├── brandcharacter.png    # 브랜드 캐릭터 이미지
    └── herosample.png        # 히어로 배경 이미지

=== USER FLOWS ===

GUEST_FLOW:
/ → /try → /quiz → /results-teaser → /auth → /dashboard

MEMBER_FLOW:
/auth → /dashboard → /context → /tutor → /settings

=== PAGE DETAILS ===

PAGE: / (랜딩 페이지)
FILE: src/app/page.tsx
PURPOSE: 서비스 소개 및 즉시 사전평가 시작 유도
COMPONENTS:
- 히어로 섹션: 타이틀 + 브랜드캐릭터 + 학년선택
- HomePage.tsx: 인터랙티브 요소들 (Client Component)
- HomeCTA.tsx: 사전평가 시작 버튼
- 신뢰성 섹션: 후기, 통계, 기능소개
CONNECTIONS:
- 학년선택 → /try?grade={선택학년}
- 둘러보기 → 페이지 하단 스크롤

PAGE: /try (사전평가 시작)
FILE: src/app/try/page.tsx
PURPOSE: 게스트 세션 생성 및 퀴즈 시작
FLOW: 학년입력 → localStorage.guestSession 생성 → /quiz 리다이렉트

PAGE: /quiz (퀴즈 진행)
FILE: src/app/quiz/page.tsx
MAIN_COMPONENT: CuteQuiz.tsx
FEATURES:
- 상단: 나가기버튼, 하트시스템(5개), 진행바, 스트릭
- 타이머: AnimatedQuizTimer.tsx (45초, 색상변화, 자동진행)
- 문제: 카드형 레이아웃, 타입배지, A/B/C/D 선택지
- 피드백: 정답/오답 모달, 애니메이션, 다음문제 버튼
GAME_ELEMENTS:
- 하트: 오답시 -1, 0되면 복구 안내
- 스트릭: 연속 정답시 증가
- XP: 정답 +10, 연속정답 보너스 +5
TIMER_BEHAVIOR:
- 45초 카운트다운
- 10초 이하: 주황색 경고
- 5초 이하: 빨간색 위험
- 시간초과: 자동 다음문제
STATE_MANAGEMENT:
- sessionId로 세션 검증
- localStorage에 답안 저장
- 5문제 완료시 세션데이터 저장
CONNECTIONS:
- 완료 → /results-teaser?session={sessionId}
- 중도이탈 → 확인모달 → /dashboard

PAGE: /results-teaser (결과 티저)
FILE: src/app/results-teaser/page.tsx
PURPOSE: 블러처리된 결과로 회원가입 유도
ELEMENTS:
- 레벨카드: 예상레벨 블러처리
- 정확도차트: 부분표시 + 잠금아이콘
- 개념분석: 일부만 공개
- CTA버튼: "회원가입하고 전체 결과 보기" → /auth
- 서브CTA: "게스트로 다시 풀기" → /try

PAGE: /auth (인증)
FILE: src/app/auth/page.tsx
PURPOSE: 원클릭 가짜 로그인
BEHAVIOR: "한 번 눌러 로그인" → 800ms 로딩 → session.isAuthenticated() = true → /dashboard

PAGE: /dashboard (대시보드)
FILE: src/app/dashboard/page.tsx
PURPOSE: 학습 현황 요약 및 네비게이션 허브
SECTIONS:
- 히어로헤더: 환영메시지, 레벨정보
- KPI그리드: 총점수, 정확도, 학습시간, 연속학습
- 학습분석카드: 강점/약점 분석
- AI튜터카드: 튜터 접근 + 배경패턴
- 활동타임라인: 최근 학습 기록
CONNECTIONS:
- "컨텍스트 보기" → /context
- "AI 튜터와 대화" → /tutor

PAGE: /context (개인화 컨텍스트)
FILE: src/app/context/page.tsx
PURPOSE: 최근 6문항 데이터 시각화 및 JSON 뷰어
ELEMENTS:
- 컨텍스트타일: 6개 문항 (개념태그, 정오답아이콘)
- JsonViewer.tsx: 토글 가능한 JSON 표시
- 튜터전달버튼: "LLM에 이 컨텍스트 전달" → /tutor
DATA: mockPersonalContext.latest6

PAGE: /tutor (AI 튜터 대화)
FILE: src/app/tutor/page.tsx
PURPOSE: 컨텍스트 기반 개인화 대화
LAYOUT:
- Desktop: 좌측 채팅영역 + 우측 액션패널(320px)
- Mobile: 상단 컨텍스트배지 + 채팅 + 하단 입력창
COMPONENTS:
- ChatBubble.tsx: 말풍선 (3px보더, 하드섀도)
- TypingIndicator.tsx: AI 입력중 표시
- 메시지기능: 복사, 북마크, 신고 (가짜)
- 입력창: 프롬프트 + 전송버튼
- 액션패널: mockRecommendedActions
RESPONSE_SYSTEM:
- 사용자입력 → generateTutorResponse() → useTyping 훅 → 타이핑애니메이션
- 키워드 기반 응답: 안녕, 이차방정식, 함수, 제곱근, default
CONTEXT_INTEGRATION:
- /context에서 "전달" → query.ctx → 상단배지 요약표시

PAGE: /settings (설정)
FILE: src/app/settings/page.tsx
PURPOSE: 사용자 프로필 및 환경설정
FORM_ELEMENTS:
- 닉네임입력: Input.tsx
- 이메일입력: Input.tsx
- 학년선택: GradeSelector.tsx
- 알림토글: 체크박스
- 저장버튼: 성공시 Toast.tsx 표시
- 로그아웃버튼: 확인모달 → 세션클리어

=== COMPONENT SYSTEM ===

LAYOUT_COMPONENTS:
Header.tsx:
- 로고, 네비게이션링크, 모바일햄버거
- 인증상태 조건부 렌더링 (useEffect + useState)
- NavLink 컴포넌트로 활성상태 표시 (핑크색 언더라인)

Layout.tsx:
- 전체 레이아웃 래퍼
- Header + 조건부 Sidebar/TabBar + children
- 인증상태에 따른 레이아웃 분기

Sidebar.tsx: 데스크톱 좌측 고정사이드바 (≥1024px)
TabBar.tsx: 모바일 하단 고정탭바 (<1024px)

UI_COMPONENTS:
Button.tsx: Primary/Secondary/Outline, sm/md/lg, 3px보더+하드섀도+둥근모서리
Card.tsx: 기본 카드 레이아웃, brutal-card 클래스
Input.tsx: 텍스트입력창, 라벨+에러메시지+도움말
Badge.tsx: 작은 라벨, 둥근 캡슐형태
Modal.tsx: 팝업모달 기본구조, 백드롭+포커스트랩
Toast.tsx: 알림메시지, 우하단 고정위치
JsonViewer.tsx: JSON 포맷팅, 줄번호+복사버튼
Skeleton.tsx: 로딩상태, 실제컨텐츠 모양유지

FEATURE_COMPONENTS:
CuteQuiz.tsx:
- 메인 퀴즈 UI (듀오링고 스타일)
- 게이미피케이션: 하트, 스트릭, XP
- 상태관리: currentQuestion, selectedAnswer, showFeedback
- 애니메이션: Framer Motion (정답 bounce, 오답 shake)
- 모달시스템: 배경클릭/ESC키/닫기버튼으로 닫기

AnimatedQuizTimer.tsx:
- Framer Motion 기반 45초 타이머
- 색상변화: 정상(파랑) → 경고(주황) → 위험(빨강)
- 진행바 + 회전 인디케이터 + 상태메시지
- 시간초과시 자동 다음문제

ChatBubble.tsx:
- 개별 채팅메시지 표시
- 좌측(튜터)/우측(사용자) 정렬
- 아바타 + 말풍선 + 타임스탬프 + 액션버튼
- useTyping 훅으로 타이핑 애니메이션

GradeSelector.tsx:
- 학년선택 세그먼트 라디오
- 중1/중2/중3 옵션
- brutal-card 스타일 적용

WebVitals.tsx:
- 성능모니터링 (web-vitals 라이브러리)
- CLS, INP, FCP, LCP, TTFB 측정

=== DATA MANAGEMENT ===

MOCK_DATA (src/lib/mockData.ts):
- mockQuizQuestions: Record<Grade, QuizQuestion[]>
- mockTutorResponses: Record<string, string[]>
- mockPersonalContext: 최근 6문항 데이터
- mockRecommendedActions: 추천 액션들
- generateTutorResponse(): 키워드 기반 응답생성
- generateMockResult(): 가짜 결과생성

STORAGE_SYSTEM:
LocalStorage 키들:
- guestSession: 게스트 사용자 세션정보
- quizAnswers: 퀴즈 답안들
- quizCompleted: 퀴즈 완료 플래그
- quizStreak: 연속 정답 카운터
- quizHearts: 남은 하트 개수
- lastQuiz: 마지막 퀴즈 결과

SESSION_MANAGEMENT:
- session.isAuthenticated(): 인증상태 확인
- storage.get/set/remove(): localStorage 헬퍼
- 게스트세션: sessionId로 추적
- 회원세션: 가짜 auth_user_id

URL_PARAMETERS:
- /try?grade=중2: 학년전달
- /quiz?session={sessionId}: 세션ID전달
- /results-teaser?session={sessionId}: 결과조회
- /tutor?ctx=latest6: 컨텍스트전달

=== CUSTOM HOOKS ===

useTyping.ts:
- 타이핑 애니메이션 훅
- 파라미터: text, speed(기본30ms), delay(기본0ms)
- 반환: { displayedText, isComplete }
- AI 응답 스트리밍 효과에 사용

useTimer.ts:
- 카운트다운 타이머 훅
- 기능: start, pause, reset, restart
- 상태: timeLeft, isRunning, hasStarted, progressReverse
- onTimeUp 콜백으로 시간초과 처리

=== DESIGN SYSTEM ===

CSS_VARIABLES (src/app/globals.css):
--color-bg: #F4F4F0           /* 밝은 베이지 배경 */
--color-ink: #0B0B0B          /* 텍스트 색상 */
--color-border: #D4D4D1       /* 부드러운 회색 보더 */
--color-border-light: #E8E8E5 /* 더 연한 보더 */
--color-accent: #FF90E8       /* 핑크 강조색 */
--color-accent-light: #FFB3F0 /* 연한 핑크 */
--color-soft: #C7F2E3         /* 민트색 */
--color-soft-light: #E5F9F3   /* 연한 민트색 */
--border-radius-sm: 12px      /* 작은 둥근모서리 */
--border-radius-md: 16px      /* 중간 둥근모서리 */
--border-radius-lg: 20px      /* 큰 둥근모서리 */
--border-radius-xl: 28px      /* 특대 둥근모서리 */

UTILITY_CLASSES:
.brutal-card: 기본카드 (border: 3px solid var(--color-border), border-radius: 20px, box-shadow: hard)
.brutal-button: 버튼 (border: 3px solid var(--color-accent), background: var(--color-accent))
.brutal-button-outline: 아웃라인버튼 (border: 3px solid var(--color-border), background: transparent)
.brutal-input: 입력창 (border: 3px solid var(--color-border))
.brutal-badge: 배지 (border: 2px solid var(--color-border-light), background: var(--color-soft-light))
.brutal-progress: 진행바 (border: 3px solid var(--color-border))

COLOR_PRIORITY:
1. 핑크 (최우선): Primary 버튼, 선택된 항목, 활성 네비게이션
2. 연핑크 (보조강조): hover 효과, 보조강조
3. 회색 (일반): 일반 보더, 구분선
4. 베이지 (배경): 따뜻하고 편안한 느낌

ANIMATION_SYSTEM:
Framer Motion 사용:
- 페이지전환: slide + scale + rotateY
- 카드호버: translateY(-2px)
- 정답피드백: scale + bounce
- 오답피드백: shake (좌우 흔들림)
- 타이머: 부드러운 진행바 + 색상변화

RESPONSIVE_BREAKPOINTS:
- Desktop: ≥1024px (Sidebar 표시)
- Tablet: 768px-1023px
- Mobile: <768px (TabBar 표시)

=== ROUTING & NAVIGATION ===

APP_ROUTER_STRUCTURE:
/ (public)
├── try (public)
├── quiz (guest session required)
├── results-teaser (guest session required)
├── auth (public)
└── authenticated routes:
    ├── dashboard
    ├── context
    ├── tutor
    └── settings

NAVIGATION_LOGIC:
- 인증 전: / → try → quiz → results-teaser → auth
- 인증 후: dashboard → context/tutor/settings
- Header.tsx에서 session.isAuthenticated()로 메뉴 조건부 표시
- Layout.tsx에서 Sidebar(desktop) vs TabBar(mobile) 조건부 표시

PROTECTED_ROUTES:
- 게스트세션 필요: /quiz, /results-teaser
- 로그인 필요: /dashboard, /context, /tutor, /settings
- sessionId 검증 실패시 /try로 리다이렉트

=== ERROR HANDLING ===

COMMON_PATTERNS:
- 세션 검증 실패 → /try 리다이렉트
- 로딩 상태 → Skeleton 컴포넌트
- 에러 상태 → 에러 카드 + 재시도 버튼
- 빈 상태 → 안내 메시지 + CTA 버튼

HYDRATION_ERRORS:
- session.isAuthenticated() 서버/클라이언트 불일치 방지
- useEffect + useState로 클라이언트 전용 상태관리
- isLoaded 플래그로 로딩 완료 후 렌더링

=== PERFORMANCE ===

OPTIMIZATION_STRATEGIES:
- Dynamic imports: CuteQuiz, ChatBubble 등 heavy 컴포넌트
- next/image: priority, quality, object-contain 설정
- Turbopack: 개발 서버 고속화
- Web Vitals 모니터링: CLS, INP, FCP, LCP, TTFB

LOADING_PATTERNS:
- Suspense boundaries for async components
- Skeleton UI for data loading states
- Progressive enhancement for animations

=== KEY FILES IMPORTANCE ===

CRITICAL (⭐⭐⭐):
- app/page.tsx: 랜딩페이지, 첫인상
- features/CuteQuiz.tsx: 핵심 퀴즈 기능
- app/tutor/page.tsx: AI 튜터 대화
- lib/mockData.ts: 모든 가짜 데이터

IMPORTANT (⭐⭐):
- layout/Header.tsx: 네비게이션 시스템
- features/AnimatedQuizTimer.tsx: 퀴즈 타이머
- app/globals.css: 디자인 시스템
- lib/utils.ts: 공통 유틸리티

SUPPORTING (⭐):
- 나머지 UI 컴포넌트들
- 설정 및 빌드 파일들

=== DEVELOPMENT NOTES ===

TYPESCRIPT_SETTINGS:
- strict: true
- noUncheckedIndexedAccess: true
- exactOptionalPropertyTypes: true

NEXT_JS_FEATURES:
- App Router 사용
- Server Components vs Client Components 구분
- Dynamic imports for performance

TAILWIND_CONFIG:
- 커스텀 색상 매핑 (CSS 변수 연결)
- 애니메이션 키프레임 정의
- 박스 섀도우 프리셋

STATE_MANAGEMENT:
- No external state library
- localStorage for persistence
- React hooks for local state
- Props drilling for component communication

=== END OF DOCUMENT ===
